knitr::opts_chunk$set(echo = TRUE)
library(binequality)
library(glue)
file = "/home/eric/Documents/franklin/narsc2018/gini_scratch/us_bins_125.csv"
us_bins <- read.csv(files[i], colClasses = c("FIPS"="character")) # write fips as string to preserve leading zeros
file = "/home/eric/Documents/franklin/narsc2018/gini_scratch/us_bins_125.csv"
us_bins <- read.csv(file, colClasses = c("FIPS"="character")) # write fips as string to preserve leading zeros
print(us_bins)
ID = us_bins$FIPS
hb = us_bins$pop
bmin = us_bins$bin_min
bmax = us_bins$bin_max
omu = rep(NA, length(us_bins))
results <- fitFunc(ID = ID, hb = hb, bin_min = bmin, bin_max = bmax, obs_mean = omu, ID_name = 'FIPS')
print(results)
ID = us_bins$FIPS
hb = us_bins$pop
bmin = us_bins$bin_min
bmax = us_bins$bin_max
omu = rep(NA, length(us_bins))
results <- fitFunc(ID = ID, hb = hb, bin_min = bmin, bin_max = bmax, obs_mean = omu, ID_name = 'FIPS')
print(results$datOut$gini)
# move 5 million from $60-74.9k bin to 10-14.9k bin
us_bins$pop[us_bins$index=='USK'] <- us_bins$pop[us_bins$index=='USK'] - 5000000
# move 5 million from $60-74.9k bin to 10-14.9k bin
us_bins$pop[us_bins$index=='USK'] <- us_bins$pop[us_bins$index=='USK'] -= 5000000
knitr::opts_chunk$set(echo = TRUE)
library(binequality)
library(glue)
file = "/home/eric/Documents/franklin/narsc2018/gini_scratch/us_bins_125.csv"
us_bins <- read.csv(file, colClasses = c("FIPS"="character")) # write fips as string to preserve leading zeros
print(us_bins)
ID = us_bins$FIPS
hb = us_bins$pop
bmin = us_bins$bin_min
bmax = us_bins$bin_max
omu = rep(NA, length(us_bins))
results <- fitFunc(ID = ID, hb = hb, bin_min = bmin, bin_max = bmax, obs_mean = omu, ID_name = 'FIPS')
print(results$datOut$gini)
# move 5 million from $60-74.9k bin to 10-14.9k bin
us_bins$pop[us_bins$index=='USK'] <- us_bins$pop[us_bins$index=='USK'] - 5000000
us_bins$pop[us_bins$index=='USK'] <- us_bins$pop[us_bins$index=='USB'] + 5000000
print(us_bins)
knitr::opts_chunk$set(echo = TRUE)
library(binequality)
library(glue)
file = "/home/eric/Documents/franklin/narsc2018/gini_scratch/us_bins_125.csv"
us_bins <- read.csv(file, colClasses = c("FIPS"="character")) # write fips as string to preserve leading zeros
print(us_bins)
ID = us_bins$FIPS
hb = us_bins$pop
bmin = us_bins$bin_min
bmax = us_bins$bin_max
omu = rep(NA, length(us_bins))
results <- fitFunc(ID = ID, hb = hb, bin_min = bmin, bin_max = bmax, obs_mean = omu, ID_name = 'FIPS')
print(results$datOut$gini)
# move 5 million from $60-74.9k bin to 10-14.9k bin
# us_bins$pop[us_bins$index=='USK'] <- us_bins$pop[us_bins$index=='USK'] - 5000000
us_bins$pop[us_bins$index=='USK'] <- us_bins$pop[us_bins$index=='USB'] + 5000000
print(us_bins)
knitr::opts_chunk$set(echo = TRUE)
library(binequality)
library(glue)
file = "/home/eric/Documents/franklin/narsc2018/gini_scratch/us_bins_125.csv"
us_bins <- read.csv(file, colClasses = c("FIPS"="character")) # write fips as string to preserve leading zeros
print(us_bins)
ID = us_bins$FIPS
hb = us_bins$pop
bmin = us_bins$bin_min
bmax = us_bins$bin_max
omu = rep(NA, length(us_bins))
results <- fitFunc(ID = ID, hb = hb, bin_min = bmin, bin_max = bmax, obs_mean = omu, ID_name = 'FIPS')
print(results$datOut$gini)
# move 5 million from $60-74.9k bin to 10-14.9k bin
# us_bins$pop[us_bins$index=='USK'] <- us_bins$pop[us_bins$index=='USK'] - 5000000
us_bins$pop[us_bins$index=='USB'] <- us_bins$pop[us_bins$index=='USB'] + 5000000
print(us_bins)
knitr::opts_chunk$set(echo = TRUE)
library(binequality)
library(glue)
file = "/home/eric/Documents/franklin/narsc2018/gini_scratch/us_bins_125.csv"
us_bins <- read.csv(file, colClasses = c("FIPS"="character")) # write fips as string to preserve leading zeros
print(us_bins)
ID = us_bins$FIPS
hb = us_bins$pop
bmin = us_bins$bin_min
bmax = us_bins$bin_max
omu = rep(NA, length(us_bins))
results <- fitFunc(ID = ID, hb = hb, bin_min = bmin, bin_max = bmax, obs_mean = omu, ID_name = 'FIPS')
print(results$datOut$gini)
# move 5 million from $60-74.9k bin to 10-14.9k bin
us_bins$pop[us_bins$index=='USK'] <- us_bins$pop[us_bins$index=='USK'] - 5000000
us_bins$pop[us_bins$index=='USB'] <- us_bins$pop[us_bins$index=='USB'] + 5000000
print(us_bins)
knitr::opts_chunk$set(echo = TRUE)
library(binequality)
library(glue)
file = "/home/eric/Documents/franklin/narsc2018/gini_scratch/us_bins_125.csv"
us_bins <- read.csv(file, colClasses = c("FIPS"="character")) # write fips as string to preserve leading zeros
print(us_bins)
ID = us_bins$FIPS
hb = us_bins$pop
bmin = us_bins$bin_min
bmax = us_bins$bin_max
omu = rep(NA, length(us_bins))
results <- fitFunc(ID = ID, hb = hb, bin_min = bmin, bin_max = bmax, obs_mean = omu, ID_name = 'FIPS')
print(results$datOut$gini)
# move 5 million from $60-74.9k bin to 10-14.9k bin
us_bins$pop[us_bins$index=='USK'] <- us_bins$pop[us_bins$index=='USK'] - 5000000
us_bins$pop[us_bins$index=='USB'] <- us_bins$pop[us_bins$index=='USB'] + 5000000
# move 5 million from 74-99.9k to highest bin
us_bins$pop[us_bins$index=='USL'] <- us_bins$pop[us_bins$index=='USL'] - 5000000
us_bins$pop[us_bins$index=='USO'] <- us_bins$pop[us_bins$index=='US0'] + 5000000
knitr::opts_chunk$set(echo = TRUE)
library(binequality)
library(glue)
file = "/home/eric/Documents/franklin/narsc2018/gini_scratch/us_bins_125.csv"
us_bins <- read.csv(file, colClasses = c("FIPS"="character")) # write fips as string to preserve leading zeros
print(us_bins)
ID = us_bins$FIPS
hb = us_bins$pop
bmin = us_bins$bin_min
bmax = us_bins$bin_max
omu = rep(NA, length(us_bins))
results <- fitFunc(ID = ID, hb = hb, bin_min = bmin, bin_max = bmax, obs_mean = omu, ID_name = 'FIPS')
print(results$datOut$gini)
# move 5 million from $60-74.9k bin to 10-14.9k bin
us_bins$pop[us_bins$index=='USK'] <- us_bins$pop[us_bins$index=='USK'] - 5000000
us_bins$pop[us_bins$index=='USB'] <- us_bins$pop[us_bins$index=='USB'] + 5000000
# move 5 million from 74-99.9k to highest bin
us_bins$pop[us_bins$index=='USL'] <- us_bins$pop[us_bins$index=='USL'] - 5000000
us_bins$pop[us_bins$index=='USO'] <- us_bins$pop[us_bins$index=='USO'] + 5000000
print(us_bins)
results <- fitFunc(ID = ID, hb = hb, bin_min = bmin, bin_max = bmax, obs_mean = omu, ID_name = 'FIPS')
print(results$datOut$gini)
knitr::opts_chunk$set(echo = TRUE)
library(binequality)
library(glue)
file = "/home/eric/Documents/franklin/narsc2018/gini_scratch/us_bins_125.csv"
us_bins <- read.csv(file, colClasses = c("FIPS"="character")) # write fips as string to preserve leading zeros
print(us_bins)
ID = us_bins$FIPS
hb = us_bins$pop
bmin = us_bins$bin_min
bmax = us_bins$bin_max
omu = rep(NA, length(us_bins))
results <- fitFunc(ID = ID, hb = hb, bin_min = bmin, bin_max = bmax, obs_mean = omu, ID_name = 'FIPS')
print(results$datOut$gini)
# move 5 million from $60-74.9k bin to 10-14.9k bin
us_bins$pop[us_bins$index=='USK'] <- us_bins$pop[us_bins$index=='USK'] - 5000000
us_bins$pop[us_bins$index=='USB'] <- us_bins$pop[us_bins$index=='USB'] + 5000000
# move 5 million from 74-99.9k to highest bin
us_bins$pop[us_bins$index=='USL'] <- us_bins$pop[us_bins$index=='USL'] - 5000000
us_bins$pop[us_bins$index=='USO'] <- us_bins$pop[us_bins$index=='USO'] + 5000000
print(us_bins)
ID = us_bins$FIPS
hb = us_bins$pop
bmin = us_bins$bin_min
bmax = us_bins$bin_max
omu = rep(NA, length(us_bins))
results <- fitFunc(ID = ID, hb = hb, bin_min = bmin, bin_max = bmax, obs_mean = omu, ID_name = 'FIPS')
print(results$datOut$gini)
knitr::opts_chunk$set(echo = TRUE)
library(binequality)
library(glue)
file = "/home/eric/Documents/franklin/narsc2018/gini_scratch/us_bins_125.csv"
us_bins <- read.csv(file, colClasses = c("FIPS"="character")) # write fips as string to preserve leading zeros
print(us_bins)
ID = us_bins$FIPS
hb = us_bins$pop
bmin = us_bins$bin_min
bmax = us_bins$bin_max
omu = rep(NA, length(us_bins))
results <- fitFunc(ID = ID, hb = hb, bin_min = bmin, bin_max = bmax, obs_mean = omu, ID_name = 'FIPS')
print(results)
knitr::opts_chunk$set(echo = TRUE)
library(binequality)
library(glue)
file = "/home/eric/Documents/franklin/narsc2018/gini_scratch/us_bins_125.csv"
us_bins <- read.csv(file, colClasses = c("FIPS"="character")) # write fips as string to preserve leading zeros
print(us_bins)
ID = us_bins$FIPS
hb = us_bins$pop
bmin = us_bins$bin_min
bmax = us_bins$bin_max
omu = rep(NA, length(us_bins))
results <- fitFunc(ID = ID, hb = hb, bin_min = bmin, bin_max = bmax, obs_mean = omu, ID_name = 'FIPS')
print(results)
# move 5 million from $60-74.9k bin to 10-14.9k bin
us_bins$pop[us_bins$index=='USK'] <- us_bins$pop[us_bins$index=='USK'] - 5000000
us_bins$pop[us_bins$index=='USB'] <- us_bins$pop[us_bins$index=='USB'] + 5000000
# move 5 million from 74-99.9k to highest bin
us_bins$pop[us_bins$index=='USL'] <- us_bins$pop[us_bins$index=='USL'] - 5000000
us_bins$pop[us_bins$index=='USO'] <- us_bins$pop[us_bins$index=='USO'] + 5000000
print(us_bins)
ID = us_bins$FIPS
hb = us_bins$pop
bmin = us_bins$bin_min
bmax = us_bins$bin_max
omu = rep(NA, length(us_bins))
results <- fitFunc(ID = ID, hb = hb, bin_min = bmin, bin_max = bmax, obs_mean = omu, ID_name = 'FIPS')
print(results)
